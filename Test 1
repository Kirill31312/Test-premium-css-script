local Scare = Instance.new("ScreenGui") local FakeDecompile = Instance.new("TextLabel") --Properties: Scare.Name = "HackGui" Scare.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui") Scare.ZIndexBehavior = Enum.ZIndexBehavior.Sibling Scare.DisplayOrder = 2147483647 FakeDecompile.Name = "FakeDecompile" FakeDecompile.Parent = Scare FakeDecompile.BackgroundColor3 = Color3.fromRGB(255, 255, 255) FakeDecompile.BackgroundTransparency = 1.000 FakeDecompile.BorderColor3 = Color3.fromRGB(0, 0, 0) FakeDecompile.BorderSizePixel = 0 FakeDecompile.Position = UDim2.new(0.136020154, 0, 0.771255076, 0) FakeDecompile.Size = UDim2.new(0, 598, 0, 75) FakeDecompile.Visible = false FakeDecompile.Font = Enum.Font.Gotham FakeDecompile.Text = "Decompiling Theme of level... (1/5)" FakeDecompile.TextColor3 = Color3.fromRGB(255, 255, 255) FakeDecompile.TextScaled = true FakeDecompile.TextSize = 14.000 FakeDecompile.TextStrokeTransparency = 0.000 FakeDecompile.TextWrapped = true local Creator = game:GetService("ReplicatedStorage").Remotes.CreateNewLevel local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() local IdLevel = 6 local Slot = 8 local Window = Rayfield:CreateWindow({ 	Name = "Classic Sonic Simulator Premium V0.0.1", 	LoadingTitle = "Classic Sonic Simulator Premium", 	LoadingSubtitle = "by temakuzurin", 	ConfigurationSaving = { 		Enabled = true, 		FolderName = "Classic Sonic Simulator Premium", 		FileName = "Big Hub" 	}, 	KeySystem = true, -- Set this to true to use their key system 	KeySettings = { 		Title = "CSS VIP SCRIPT KEY", 		Subtitle = "Key System", 		Note = "Buy key and put here!", 		SaveKey = true, 		Key = "46ya08fm" 	} }) local Zone = nil local Chara = nil local LoadZoneEvent = game:GetService("ReplicatedStorage").Remotes.LoadGame local SelZone = nil local ActZone = 1 Rayfield:Notify("Title Example", "Content/Description Example", 4483362458) -- Notfication -- Title, Content, Image local Tab = Window:CreateTab("Unused Zones!", 4483362458) -- Title, Image local Section = Tab:CreateSection("Unused/Cancelled Zones") local Dropdown = Tab:CreateDropdown({ 	Name = "Select Unused Zone", 	Options = {"Virtual Reality","Chemical Plant", "Aquatic Ruin","Metropolis", "Sandopolis", "Test", "????"}, 	CurrentOption = "Virtual Reality", 	Flag = "Virtual Reality", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps 	Callback = function(Option) 		SelZone = Option 		print(SelZone) 	end, }) local Button = Tab:CreateButton({ 	Name = "Load Zone!", 	Callback = function() 		print(SelZone, ActZone) 		Zone = 			{ 				[1] = tostring(SelZone), 				[2] = ActZone, 				[3] = 				{ 					[1] = 34, 					[2] = 462 				},		 				[4] = 8, 				[5] = tostring(SelZone) 			} 		Chara = 3 		LoadZoneEvent:FireServer(Zone, Chara) 	end, }) local Tab = Window:CreateTab("All Packs!", 4483362458) local Button = Tab:CreateButton({ 	Name = "Enable EXE Pack (Beta)", 	Callback = function() 		while game:GetService("RunService").RenderStepped:Wait() do 			game.Players.LocalPlayer.PlayerGui:WaitForChild("MusicHandler")["Music Script"].Intro.TimePosition = 9999 			game.Players.LocalPlayer.PlayerGui:WaitForChild("MusicHandler")["Music Script"].Loop.SoundId = "rbxassetid://1427189017" 			for i,v in pairs(game.Players.LocalPlayer.PlayerGui:WaitForChild("Game").Backdrop.Main.World.Tiles:GetChildren()) do 				v.ImageColor3 = Color3.new(1, 0, 0) 			end 			for i,v in pairs(game.Players.LocalPlayer.PlayerGui:WaitForChild("Game").Backdrop.Main.Engine:GetChildren()) do 				if v.ClassName == "Sound" then 					v.PlaybackSpeed = 0.75 				end 			end 			for i,v in pairs(game.Players.LocalPlayer.PlayerGui:WaitForChild("Game").Backdrop.Main.World.Objects:GetDescendants()) do 				if v.ClassName == "ImageLabel" then 					v.ImageColor3 = Color3.new(1, 0, 0) 				end 			end 		end 		-- The function that takes place when the button is pressed 	end, }) local Tab = Window:CreateTab("Steal ALL Levels! (BETA)", 4483362458) local Button = Tab:CreateButton({ 	Name = "Steal Level!", 	Callback = function() 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Visible = true 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Text = "Decompiling Theme of level... (1/5)" 		wait(0.8) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Text = "Decompiling Layout of level... (2/5)" 		wait(10) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Text = "Decompiling Ground Skin of level... (3/5)" 		wait(1) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Text = "Decompiling Colors of level... (4/5)" 		wait(0.5) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Text = "Decompiling Events of level... (5/5)" 		wait(5) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Text = "Successfully Decompiled! Sending you to the stealed level!" 		game:GetService("Players").LocalPlayer.PlayerGui.Game:Destroy() 		Creator:FireServer(IdLevel, Slot) 		wait(4) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.Decompile.Visible = false 	end, }) local Tab = Window:CreateTab("Testing functions!", 4483362458) local Button = Tab:CreateButton({ 	Name = "Ban AbdielPigGWorld (FE)!", 	Callback = function() 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.FakeDecompile.Text = "Finding AbdielPigGWorld..." 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.FakeDecompile.Visible = true 		wait(2) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.FakeDecompile.Text = "Found AbdielPigGWorld, ID: 387885416." 		wait(0.5) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.FakeDecompile.Text = "Banning AbdielPigGWorld..." 		wait(5) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.FakeDecompile.Text = "Successfully Banned 387885416!" 		wait(5) 		game:GetService("Players").LocalPlayer.PlayerGui.HackGui.FakeDecompile.Visible = false 	end, }) game.CoreGui:WaitForChild("Rayfield").Main.Draggable = true game.CoreGui:WaitForChild("Rayfield").Main.Active = true --[[ local Button = Tab:CreateButton({ 	Name = "Button Example", 	Callback = function() 		-- The function that takes place when the button is pressed 	end, }) local Toggle = Tab:CreateToggle({ 	Name = "Toggle Example", 	CurrentValue = false, 	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps 	Callback = function(Value) 		-- The function that takes place when the toggle is pressed 		-- The variable (Value) is a boolean on whether the toggle is true or false 	end, }) local Slider = Tab:CreateSlider({ 	Name = "Slider Example", 	Range = {0, 100}, 	Increment = 10, 	Suffix = "Bananas", 	CurrentValue = 10, 	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps 	Callback = function(Value) 		-- The function that takes place when the slider changes 		-- The variable (Value) is a number which correlates to the value the slider is currently at 	end, }) local Label = Tab:CreateLabel("Label Example") local Paragraph = Tab:CreateParagraph({Title = "Paragraph Example", Content = "Paragraph Example"}) local Input = Tab:CreateInput({ 	Name = "Input Example", 	PlaceholderText = "Input Placeholder", 	RemoveTextAfterFocusLost = false, 	Callback = function(Text) 		-- The function that takes place when the input is changed 		-- The variable (Text) is a string for the value in the text box 	end, }) local Keybind = Tab:CreateKeybind({ 	Name = "Keybind Example", 	CurrentKeybind = "Q", 	HoldToInteract = false, 	Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps 	Callback = function(Keybind) 		-- The function that takes place when the keybind is pressed 		-- The variable (Keybind) is a boolean for whether the keybind is being held or not (HoldToInteract needs to be true) 	end, }) local Dropdown = Tab:CreateDropdown({ 	Name = "Dropdown Example", 	Options = {"Option 1","Option 2"}, 	CurrentOption = "Option 1", 	Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps 	Callback = function(Option) 		-- The function that takes place when the selected option is changed 		-- The variable (Option) is a string for the value that the dropdown was changed to 	end, }) local Button = Tab:CreateButton({ 	Name = "Destroy UI", 	Callback = function() 		Rayfield:Destroy() 	end, }) --]] -- Extras -- getgenv().SecureMode = true -- Only Set To True If Games Are Detecting/Crashing The UI -- Rayfield:Destroy() -- Destroys UI -- Rayfield:LoadConfiguration() -- Enables Configuration Saving -- Section:Set("Section Example") -- Use To Update Section Text -- Button:Set("Button Example") -- Use To Update Button Text -- Toggle:Set(false) -- Use To Update Toggle -- Slider:Set(10) -- Use To Update Slider Value -- Label:Set("Label Example") -- Use To Update Label Text -- Paragraph:Set({Title = "Paragraph Example", Content = "Paragraph Example"}) -- Use To Update Paragraph Text -- Keybind:Set("RightCtrl") -- Keybind (string) -- Use To Update Keybind -- Dropdown:Set("Option 2") -- The new option value -- Use To Update/Set New Dropdowns
